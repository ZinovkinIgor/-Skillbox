"""
Задача 6. Односвязный список
Что нужно сделать
Мы продолжаем тему структур данных и алгоритмов. И в этот раз вам нужно реализовать односвязный список.
Связный список — это структура данных, которая состоит из элементов, называющихся узлами. В узлах хранятся данные,
а между собой узлы соединены связями. Связь — это ссылка на следующий или предыдущий элемент списка.
В односвязном списке связь — это ссылка только на следующий элемент, то есть в нём можно передвигаться только в
сторону конца списка. Узнать адрес предыдущего элемента, опираясь на содержимое текущего узла, невозможно.
Реализуйте такую структуру данных без использования стандартных структур Python (list, dict, tuple и прочие) и
дополнительных модулей. Для структуры реализуйте следующие методы:
append — добавление элемента в конец списка;
get — получение элемента по индексу;
remove — удаление элемента по индексу.
Дополнительно: сделайте так, чтобы по списку можно было итерироваться с помощью цикла.

Пример основной программы:

my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)
print('Текущий список:', my_list)
print('Получение третьего элемента:', my_list.get(2))
print('Удаление второго элемента.')
my_list.remove(1)
print('Новый список:', my_list)

Результат:
Текущий список: [10 20 30]
Получение третьего элемента: 30
Удаление второго элемента.
Новый список: [10 30]
"""


class Node:
    # Определяем данные и следующий шаг
    def __init__(self, data=None, next_data=None):
        self.data = data
        self.next_data = next_data


class LinkedList:
    # Определяем начало списка и конец списка
    def __init__(self):
        self.head = None
        self.last_data = None

    def append(self, data):                             # Добавляем данные
        if self.last_data is None:                      # проверяем если конец списка является None
            self.head = Node(data)                      # то началом становится первые данные
            self.last_data = self.head                  # концом списка является первые данные
        else:                                           # иначе
            self.last_data.next_data = Node(data)       # следующий шаг конца списка равен данным
            self.last_data = self.last_data.next_data   # концом списка являются следующий шаг с данными

    def display(self):                                  # выводим на экран
        curr = self.head                                # curr начало списка
        while curr is not None:                         # цикл работает пока  curr не является None
            print(curr.data, end=' ')                   # печатает данные
            curr = curr.next_data                       # curr переходит к следующим данным

    def get(self, index):                               # выводим значение по индексу
        try:                                            #
            score = 0                                   #
            next = self.head                            # next начало списка
            while score <= index:                       # цикл пока счетчик меньше или равен индексу
                if score == index:                      # если индекс == счетчику
                    return next.data                    # возвращаем значение
                next = next.next_data                   # иначе перезаписываем значение на следующее
                score += 1                              # счетчик + 1
        except AttributeError:                          # ловим исключение если индекс превышает список
            print('\nИндекс выходит за границы')        #

    def remove(self, index):                               # выводим значение по индексу
        try:                                            #
            score = 0                                   #
            next = self.head                            # next начало списка
            while score <= index:                       # цикл пока счетчик меньше или равен индексу
                if score == (index - 1):
                    next.next_data = next.next_data.next_data # следующее значение идет через 1
                    return next                         # возвращаем значение
                next = next.next_data                   # иначе перезаписываем значение на следующее
                score += 1                              # счетчик + 1
        except AttributeError:                          # ловим исключение если индекс превышает список
            print('\nИндекс выходит за границы')


my_list = LinkedList()
my_list.append(10)
my_list.append(20)
my_list.append(30)
my_list.append(55)
print('Текущий список:', end=' ')
my_list.display()
print('\nПолучение третьего элемента:', my_list.get(2))
print('Удаление второго элемента.')
my_list.remove(1)
print('Новый список:', end=' ')
my_list.display()
#


