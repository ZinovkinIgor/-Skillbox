Задача 1. Новые списки
Что нужно сделать
Даны три списка:

floats: List[float] = [12.3554, 4.02, 5.777, 2.12, 3.13, 4.44, 11.0001]
names: List[str] = ["Vanes", "Alen", "Jana", "William", "Richards", "Joy"]
numbers: List[int] = [22, 33, 10, 6894, 11, 2, 1]
Напишите код, который создаёт три новых списка. Вот их содержимое:

Каждое число из списка floats возводится в третью степень и округляется до трёх знаков после запятой.
Из списка names берутся только имена минимум из пяти букв.
Из списка numbers берётся произведение всех чисел.

Что оценивается в задаче
Результат вычислений корректен.
Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
Решение опирается на использование лямбда-функций.


Задача 2. И снова zip
Что нужно сделать
Помните, как нам приходилось что-то выдумывать, чтобы создать аналог функции zip? Теперь вы знаете,
как это сделать в одну строку.

Даны список букв (letters) и список цифр (numbers). Каждый список состоит из N элементов.
Создайте кортежи из пар элементов списков и запишите их в список results. Не используйте функцию zip.
Решите задачу в одну строку (не считая print(results)).

Примеры списков:
letters: List[str] = ['a', 'b', 'c', 'd', 'e']
numbers: List[int] = [1, 2, 3, 4, 5, 6, 7, 8]



Результат работы программы:
[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]

Что оценивается
Результат вычислений корректен.
Формат вывода соответствует примеру.
Переменные, функции и собственные методы классов имеют значащие имена (не a, b, c, d).
Решение опирается на использование лямбда-функций.


Задача 3. Палиндром: возвращение
Что нужно сделать
Есть множество встроенных и внешних библиотек для работы с данными в Python.
С некоторыми из них вы уже работали. Например, с модулем collections,
когда использовали специальный класс OrderedDict, с помощью которого делали упорядоченный словарь.
В этой библиотеке есть и другие возможности, но их немного. Официальная документация: collections — Container datatypes.

Используя модуль collections, реализуйте функцию can_be_poly, которая принимает на вход строку и проверяет,
можно ли получить из неё палиндром.

Пример кода:

print(can_be_poly('abcba'))
print(can_be_poly('abbbc'))
Результат:
True
False